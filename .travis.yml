sudo: required

services:
- docker
env:
  global:
    # Ensure the install happens without prompts
    - GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json
    - PROJECT_NAME_STG=cloudboost-staging
    - CLUSTER_NAME_STG=cloudboost-staging
    - PROJECT_NAME_PRD=cloudboost-production
    - CLUSTER_NAME_PRD=cloudboost-production
    - CLOUDSDK_COMPUTE_ZONE=us-central1-a
    - NODE_ENV=CI
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

language: node_js
node_js:
- '6'

cache:
  directories:
  - node_modules # NPM packages
  - "$HOME/google-cloud-sdk/"

# before_install:
# - docker run --name mongo -p 27017:27017 -d mongo:3.2
# - docker run --name redis -p 6379:6379 -d redis:3.0
# - sleep 5s
# - docker exec $(docker ps -aqf "name=mongo") mongo _GLOBAL --eval "db.getCollection('_Settings').insertOne({secureKey:'1227d1c4-1385-4d5f-ae73-23e99f74b006',clusterKey:'1227d1c4-1385-4d5f-ae73-23e99f74b006',myURL:'http://localhost:4730'});"

# install:
# - npm install grunt-cli -g
# - npm install eslint -g
# - npm install
# - docker build -t cloudboost/cloudboost:2.0.$TRAVIS_BUILD_NUMBER .
# - if [ "$TRAVIS_BRANCH" == "release" ]; then
#     docker tag cloudboost/cloudboost:2.0.$TRAVIS_BUILD_NUMBER cloudboost/cloudboost:latest;
#   fi
# - if [ "$TRAVIS_BRANCH" == "deploy-update" ]; then
#     docker tag cloudboost/cloudboost:2.0.$TRAVIS_BUILD_NUMBER cloudboost/cloudboost:master-2.0.$TRAVIS_BUILD_NUMBER;
#   fi
# - docker run --name cloudboost
#     -e  ANALYTICS_URL=$ANALYTICS_URL
#     -e  ANALYTICS_KEY=$ANALYTICS_KEY
#     -e  LOGGLY_TOKEN=$LOGGLY_TOKEN
#     -e  LOGGLY_SUBDOMAIN=$LOGGLY_SUBDOMAIN
#     -e  LOGGLY_TAGS=$LOGGLY_TAGS
#     -e  MAIL_PROVIDER_API_KEY=$MAIL_PROVIDER_API_KEY
#     -e  DOMAIN=$DOMAIN
#     -e  FROM_EMAIL=$FROM_EMAIL
#     -e  FROM_NAME=$FROM_NAME
#     -p 4730:4730 -it --link redis:redis --link mongo:mongo -d cloudboost/cloudboost:2.0.$TRAVIS_BUILD_NUMBER
# - sleep 5s
# - docker logs cloudboost
# - webpack
# docker push cloudboost/cloudboost:master-2.0.$TRAVIS_BUILD_NUMBER;

after_success:
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - gcloud --quiet version
  - gcloud --quiet components update
  - gcloud --quiet components update kubectl
  - if [ "$TRAVIS_BRANCH" == "deploy-update" ]; then
      echo "$DOCKERPASSWORD" | docker login -u "$DOCKERUSERNAME" --password-stdin;
      echo $GCLOUD_SERVICE_KEY_PRD | base64 --decode -i > ${HOME}/gcloud-service-key.json;
      gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json;

      gcloud --quiet config set project $PROJECT_NAME_PRD;
      gcloud --quiet config set container/cluster $CLUSTER_NAME_PRD;
      gcloud --quiet config set compute/zone ${CLOUDSDK_COMPUTE_ZONE};
      gcloud --quiet container clusters get-credentials $CLUSTER_NAME_PRD;

      kubectl config view;
      kubectl config current-context;

      kubectl set image deployment cloudboost-api cloudboost-api=cloudboost/cloudboost:master-2.0.860;
      kubectl rollout status deployment cloudboost-api;
    fi

# before_deploy:
#   - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
#   - source /home/travis/google-cloud-sdk/path.bash.inc
#   - gcloud --quiet version
#   - gcloud --quiet components update
#   - gcloud --quiet components update kubectl

deploy:
  - provider: releases
    api_key: $GH_TOKEN
    file: "README.md"
    skip_cleanup: true
    on:
      tags: false
      branch: release
  - provider: script
    script: ./deploy/production.sh
    skip_cleanup: true
    on:
      tags: false
      branch: release
  # - provider: script
  #   script: ./deploy/staging.sh
  #   skip_cleanup: true
  #   on:
  #     tags: false
  #     branch: deploy-update
#Notify Team on Slack
notifications:
  slack: hackerbaycompany:gm7nWJDLDtBRyF75VKLKOoMW
